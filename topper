def get_toppers(scores_dataset,subject,gender):
    score=[]
    name=[]
    for i in range(len(scores_dataset)):
        score.append(scores_dataset[1][subject])
    max_score=max(score)
    for i in range(len(score_dataset)):
        if(scores_dataset[i]['Gender']==gender):
            if(scores_dataset[i][subject]==max_score):
                name.append(scores_dataset[i]['name'])
    return name            

next program


def freq_to_words(words):
    word_freq_dict = {}
    
    # Count the frequency of each word
    for word in words:
        word_freq_dict[word] = word_freq_dict.get(word, 0) + 1

    # Create a dictionary with the frequency as key and a list of words as value
    freq_to_words_dict = {}
    for word, freq in word_freq_dict.items():
        if freq not in freq_to_words_dict:
            freq_to_words_dict[freq] = []
        freq_to_words_dict[freq].append(word)

    return freq_to_words_dict

next program

def two_level_sort(scores):
    # Level-1 sorting: Sort the list of tuples based on marks in ascending order
    for i in range(len(scores)):
        for j in range(i + 1, len(scores)):
            if scores[i][1] > scores[j][1]:
                scores[i], scores[j] = scores[j], scores[i]

    # Level-2 sorting: Sort the students with equal marks alphabetically by their names
    for i in range(len(scores) - 1):
        j = i + 1
        while j < len(scores) and scores[i][1] == scores[j][1]:
            if scores[i][0] > scores[j][0]:
                scores[i], scores[j] = scores[j], scores[i]
            j += 1

    return scores